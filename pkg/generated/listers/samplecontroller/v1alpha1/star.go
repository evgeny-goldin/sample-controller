/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "sample-controller/pkg/apis/samplecontroller/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StarLister helps list Stars.
// All objects returned here must be treated as read-only.
type StarLister interface {
	// List lists all Stars in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Star, err error)
	// Stars returns an object that can list and get Stars.
	Stars(namespace string) StarNamespaceLister
	StarListerExpansion
}

// starLister implements the StarLister interface.
type starLister struct {
	indexer cache.Indexer
}

// NewStarLister returns a new StarLister.
func NewStarLister(indexer cache.Indexer) StarLister {
	return &starLister{indexer: indexer}
}

// List lists all Stars in the indexer.
func (s *starLister) List(selector labels.Selector) (ret []*v1alpha1.Star, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Star))
	})
	return ret, err
}

// Stars returns an object that can list and get Stars.
func (s *starLister) Stars(namespace string) StarNamespaceLister {
	return starNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StarNamespaceLister helps list and get Stars.
// All objects returned here must be treated as read-only.
type StarNamespaceLister interface {
	// List lists all Stars in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Star, err error)
	// Get retrieves the Star from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Star, error)
	StarNamespaceListerExpansion
}

// starNamespaceLister implements the StarNamespaceLister
// interface.
type starNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Stars in the indexer for a given namespace.
func (s starNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Star, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Star))
	})
	return ret, err
}

// Get retrieves the Star from the indexer for a given namespace and name.
func (s starNamespaceLister) Get(name string) (*v1alpha1.Star, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("star"), name)
	}
	return obj.(*v1alpha1.Star), nil
}
